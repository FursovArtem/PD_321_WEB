@page "/disciplines"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using BlazorAppPD_212.Models
@using BlazorAppPD_212.Data
@implements IAsyncDisposable
@inject IDbContextFactory<BlazorAppPD_212.Data.BlazorAppPD_212Context> DbFactory
@rendermode InteractiveServer

<PageTitle>Disciplines</PageTitle>

<h1>Disciplines</h1>

<p>
    <a href="disciplines/create">Create New</a>
</p>

<QuickGrid Class="table" Items="FilteredDisciplines">
    <PropertyColumn Property="discipline => discipline.discipline_id" Sortable="true" Title="ID">
        <ColumnOptions>
            <div>
                <input type="search" @bind="idFilter" @bind:event="onchange"></input>
            </div>
        </ColumnOptions>
        </PropertyColumn>
    <PropertyColumn Property="discipline => discipline.discipline_name" Sortable="true" Title="Название дисциплины">
        <ColumnOptions>
            <div>
                <input type="search" @bind="disciplineNameFilter" @bind:event="oninput"></input>
            </div>
        </ColumnOptions>
    </PropertyColumn>
    <PropertyColumn Property="discipline => discipline.number_of_lessons" Sortable="true" Title="Количество уроков">
        <ColumnOptions>
            <div>
                <input type="search" @bind="numberOfLessonsFilter" @bind:event="oninput"></input>
            </div>
        </ColumnOptions>
    </PropertyColumn>

    <TemplateColumn Context="discipline">
        <a href="@($"disciplines/edit?discipline_id={discipline.discipline_id}")">Edit</a> |
        <a href="@($"disciplines/details?discipline_id={discipline.discipline_id}")">Details</a> |
        <a href="@($"disciplines/delete?discipline_id={discipline.discipline_id}")">Delete</a>
    </TemplateColumn>
</QuickGrid>

@code {
    private BlazorAppPD_212Context context = default!;

    int idFilter = 0;
    string disciplineNameFilter = "";
    int numberOfLessonsFilter = 0;
    IQueryable<Discipline> FilteredDisciplines =>
    context.Disciplines.Where
    (
        d => 
        d.discipline_name.Contains(disciplineNameFilter) && 
        (d.number_of_lessons == numberOfLessonsFilter || numberOfLessonsFilter == 0) &&
        (d.discipline_id == idFilter  || idFilter == 0 )
    );

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
    public void ResetFilters()
    {
        idFilter = 0;
        disciplineNameFilter = "";
        numberOfLessonsFilter = 0;
    }
}
